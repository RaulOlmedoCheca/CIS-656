package server;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;import java.rmi.server.UnicastRemoteObject;import java.util.TreeMap;import java.util.Vector;public class PresenceServiceImpl implements PresenceService {    private TreeMap<String, RegistrationInfo> registeredUsers;    private PresenceServiceImpl() {        registeredUsers = new TreeMap<>();    }    @Override    public boolean register(RegistrationInfo reg) {        if (registeredUsers.containsKey(reg.getUserName())) {            System.out.println("Unable to register into server");            return false;        }        registeredUsers.put(reg.getUserName(), reg);        System.out.println("Registered in server");        return true;    }    @Override    public boolean updateRegistrationInfo(RegistrationInfo reg) {        if (registeredUsers.containsKey(reg.getUserName())) {            RegistrationInfo oldInfo = lookup(reg.getUserName());            registeredUsers.replace(reg.getUserName(), oldInfo, reg);            System.out.println("Value correctly updated in server");            return true;        }        System.out.println("Value cannot be updated, does not exist in server");        return false;    }    @Override    public void unregister(String userName) {        if (registeredUsers.containsKey(userName)) {            registeredUsers.remove(userName);            System.out.println("Unregistered from server");        } else {            System.out.println("Could not unregister non existing user");        }    }    @Override    public RegistrationInfo lookup(String name) {        if (registeredUsers.containsKey(name)) {            return registeredUsers.get(name);        }        return null;    }    @Override    public Vector<RegistrationInfo> listRegisteredUsers() {        return new Vector<>(registeredUsers.values());    }    public static void main(String[] args) {        if (args.length != 1) {            System.out.println("Wrong parameters");            return;        }        int port = Integer.parseInt(args[0]);        if (System.getSecurityManager() == null) {            System.setSecurityManager(new SecurityManager());        }        try {            String name = "PresenceServiceImpl";            PresenceService localServer = new PresenceServiceImpl();            PresenceService stub = (PresenceService) UnicastRemoteObject.exportObject(localServer, 0);            Registry registry = LocateRegistry.getRegistry(port);            registry.rebind(name, stub);            System.out.println("PresenceServiceImpl bound");        } catch (Exception e) {            System.err.println("PresenceServiceImpl exception:");            e.printStackTrace();        }    }}